// 剑指offer刷题记录：
1，二维数组，行列均递增形式，判断target是否存在
// c++版本
// 方法一：
       bool Find(int target, vector<vector<int> > array) {
        for(int i = 0;i <  array.size();++i){
            for(int j = 0; j <array[i].size();++j){
                if(array[i][j] == target){
                   return true;
                }
            }
        }
        return false;
    }

// 方法二：
	bool Find(int target, vector<vector<int> > array) {
        int row = array.size()-1;
        int cloumn = 0;
        while(row >=0 &&cloumn <array[0].size()){
            if(target ==array[row][cloumn]){
                return true;
            }else if(target <array[row][cloumn]){
                row--;
            }else{
                cloumn++;
            }
        }
         return false;
    }



2，替换空格
	void replaceSpace(char *str,int length) {
        int count = 0;
        // 计算空格的个数
        for(int i = 0; i < length && str[i] != '\0'; ++i){
            if(str[i] == ' '){
                count++;
            }
        }
        if(count == 0) return;
        // 替换字符串
        int index = length + count * 2;
        for(int i = length;i >= 0 ;--i){
            if(str[i] == ' '){
                str[index--] = '0';
                str[index--] = '2';
                str[index--] = '%';
            }else{
                str[index] = str[i];
                index--;
            }
        }
    }

3,从尾到头打印链表
    // 方法一
    vector<int> printListFromTailToHead(ListNode* head) {
       vector<int> result;
        stack<int> tmp;
        ListNode* cur=head;
        while(cur)
            {
            tmp.push(cur->val);
            cur=cur->next;
        }
        while(!tmp.empty())
            {
            result.push_back(tmp.top());
            tmp.pop();
        }
         return result;
    }
    // 方法二
    vector<int> printListFromTailToHead(ListNode* head) {
        vector<int> result;
        stack<int> temp;
        while(head){
            temp.push(head->val);
            head = head->next;
        }
        while(!temp.empty()){
            result.push_back(temp.top());
            temp.pop();
        }
        return result;
    }
4，重建二叉树
5，两个栈实现一个队列
	class Solution
	{
	public:
	    void push(int node) {
		stack1.push(node);
	    }

	    int pop() {
		while(!stack1.empty())
		{
		    stack2.push(stack1.top());
		    stack1.pop();
		}
		int res=stack2.top();
		stack2.pop();
	
		while(!stack2.empty())
		{
		    stack1.push(stack2.top());
		    stack2.pop();
		}
		return res;
	    }
	private:
	    stack<int> stack1;
	    stack<int> stack2;
	};
6，旋转数组的最小数字
    int minNumberInRotateArray(vector<int> rotateArray) {
        int start = 0;
        int end = rotateArray.size()-1;
        
        while(start < end){
            int mid = (start + end) / 2;
            if(rotateArray[mid] <= rotateArray[end]){
                end = mid;
            }else if(rotateArray[mid] > rotateArray[end]){
                start = mid + 1;
            }
        }
        
        return rotateArray[start];
    }
7，斐波那契数列
	class Solution {
	public:
	    int Fibonacci(int n) {
		if(n == 0){
		    return 0;
		}else if(n == 1){
		    return 1;
		}else if(n == 2){
		    return 1;
		}else {
		    return Fibonacci(n-1) + Fibonacci(n-2);
		}
	    }
	};
8，跳台阶 -- 数学逻辑 
    int jumpFloor(int number) {
        //归纳法-斐波那契
        if(number ==1){ 
            return 1;
        }else if(number==2){
            return 2;
        }else{
            return jumpFloor(number-1)+jumpFloor(number-2);
        }
    }
9，变态跳台阶 -- 数学逻辑
    int jumpFloorII(int number) {
        return pow(2,number-1);
    }

